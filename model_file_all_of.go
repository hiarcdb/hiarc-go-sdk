/*
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// FileAllOf struct for FileAllOf
type FileAllOf struct {
	VersionCount *float32 `json:"versionCount,omitempty"`
}

// NewFileAllOf instantiates a new FileAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileAllOf() *FileAllOf {
	this := FileAllOf{}
	return &this
}

// NewFileAllOfWithDefaults instantiates a new FileAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileAllOfWithDefaults() *FileAllOf {
	this := FileAllOf{}
	return &this
}

// GetVersionCount returns the VersionCount field value if set, zero value otherwise.
func (o *FileAllOf) GetVersionCount() float32 {
	if o == nil || o.VersionCount == nil {
		var ret float32
		return ret
	}
	return *o.VersionCount
}

// GetVersionCountOk returns a tuple with the VersionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileAllOf) GetVersionCountOk() (*float32, bool) {
	if o == nil || o.VersionCount == nil {
		return nil, false
	}
	return o.VersionCount, true
}

// HasVersionCount returns a boolean if a field has been set.
func (o *FileAllOf) HasVersionCount() bool {
	if o != nil && o.VersionCount != nil {
		return true
	}

	return false
}

// SetVersionCount gets a reference to the given float32 and assigns it to the VersionCount field.
func (o *FileAllOf) SetVersionCount(v float32) {
	o.VersionCount = &v
}

func (o FileAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VersionCount != nil {
		toSerialize["versionCount"] = o.VersionCount
	}
	return json.Marshal(toSerialize)
}

type NullableFileAllOf struct {
	value *FileAllOf
	isSet bool
}

func (v NullableFileAllOf) Get() *FileAllOf {
	return v.value
}

func (v *NullableFileAllOf) Set(val *FileAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFileAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFileAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileAllOf(val *FileAllOf) *NullableFileAllOf {
	return &NullableFileAllOf{value: val, isSet: true}
}

func (v NullableFileAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
